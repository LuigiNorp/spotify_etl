{
    "sourceFile": "dags/spotify_etl.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1646528402477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1646528871757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,10 +41,10 @@\n #    return True\n \n def run_spotify_etl():\n     # Scheme: postgresql://user:password@localhost:5432/database_name\n-    DATABASE_URI = open('postgres_conection.txt').readline().strip()\n-    TOKEN = open('token.txt').readline().strip()\n+    DATABASE_URI = open('./postgres_conection.txt').readline().strip()\n+    TOKEN = open('./token.txt').readline().strip()\n     engine = create_engine(DATABASE_URI)\n     headers = {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n"
                },
                {
                    "date": 1646529594726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,10 @@\n #    return True\n \n def run_spotify_etl():\n     # Scheme: postgresql://user:password@localhost:5432/database_name\n-    DATABASE_URI = open('./postgres_conection.txt').readline().strip()\n+    #DATABASE_URI = open('./postgres_conection.txt').readline().strip()\n+    DATABASE_URI = 'postgresql://airflow:airflow@localhost:5432/airflow'\n     TOKEN = open('./token.txt').readline().strip()\n     engine = create_engine(DATABASE_URI)\n     headers = {\n         'Accept': 'application/json',\n"
                },
                {
                    "date": 1646529890503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,11 +41,10 @@\n #    return True\n \n def run_spotify_etl():\n     # Scheme: postgresql://user:password@localhost:5432/database_name\n-    #DATABASE_URI = open('./postgres_conection.txt').readline().strip()\n     DATABASE_URI = 'postgresql://airflow:airflow@localhost:5432/airflow'\n-    TOKEN = open('./token.txt').readline().strip()\n+    TOKEN = 'BQCZuostcdCzCZb5XY-h9gYn827hTnYu2a1__e01u47-r7eltJwhLBbZ68PsM-8WSOLfDTMdyZxrmwfMhT3SV37xzDa9U4eZGg4gpbqA5_Ap5W2QgQH_D_sWN2nKxE7078lo3uladJOngboV'\n     engine = create_engine(DATABASE_URI)\n     headers = {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n"
                },
                {
                    "date": 1646540305869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         data = r.json()\n         if 'error' not in data:\n             break\n \n-        with open('./misc/token.txt', 'w') as file:\n+        with open('../misc/token.txt', 'w') as file:\n             # TODO: Obtain a new token automatically from Spotify API webpage\n             TOKEN = input('Please write a new token')\n             file.write(TOKEN)\n             headers = {\n"
                },
                {
                    "date": 1646540911823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,20 +60,18 @@\n         data = r.json()\n         if 'error' not in data:\n             break\n \n-        with open('../misc/token.txt', 'w') as file:\n-            # TODO: Obtain a new token automatically from Spotify API webpage\n-            TOKEN = input('Please write a new token')\n-            file.write(TOKEN)\n-            headers = {\n-                'Accept': 'application/json',\n-                'Content-Type': 'application/json',\n-                'Authorization': 'Bearer {token}'.format(token=TOKEN)\n-            }\n-            today = datetime.now()\n-            before = today - timedelta(days=1)\n-            before_unix_timestamp = int(before.timestamp()) * 1000\n+        # TODO: Obtain a new token automatically from Spotify API webpage\n+        TOKEN = input('Please write a new token')\n+        headers = {\n+            'Accept': 'application/json',\n+            'Content-Type': 'application/json',\n+            'Authorization': 'Bearer {token}'.format(token=TOKEN)\n+        }\n+        today = datetime.now()\n+        before = today - timedelta(days=1)\n+        before_unix_timestamp = int(before.timestamp()) * 1000\n \n     song_names = []\n     artist_names = []\n     played_at_list = []\n"
                },
                {
                    "date": 1646541019035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n         if 'error' not in data:\n             break\n \n         # TODO: Obtain a new token automatically from Spotify API webpage\n-        TOKEN = input('Please write a new token')\n+        print('here goes a new token')\n         headers = {\n             'Accept': 'application/json',\n             'Content-Type': 'application/json',\n             'Authorization': 'Bearer {token}'.format(token=TOKEN)\n"
                },
                {
                    "date": 1646541397971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n def run_spotify_etl():\n     # Scheme: postgresql://user:password@localhost:5432/database_name\n     DATABASE_URI = 'postgresql://airflow:airflow@localhost:5432/airflow'\n-    TOKEN = 'BQCZuostcdCzCZb5XY-h9gYn827hTnYu2a1__e01u47-r7eltJwhLBbZ68PsM-8WSOLfDTMdyZxrmwfMhT3SV37xzDa9U4eZGg4gpbqA5_Ap5W2QgQH_D_sWN2nKxE7078lo3uladJOngboV'\n+    TOKEN = 'BQCYf-Lq5XRLPnl9uVkOp59ocP-6gVpmeaz3ypLnqkxPy4uxcCiGt8Kw4S4xTR3_0gU8s8SeZ1-BEwwXdkxZ6llG5R52_d2fjhI3bVcihRuAv2c5nO3QerU2nj8N0yQNgfxr8f0gx0D-9SUE'\n     engine = create_engine(DATABASE_URI)\n     headers = {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n"
                },
                {
                    "date": 1646545391331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n def run_spotify_etl():\n     # Scheme: postgresql://user:password@localhost:5432/database_name\n     DATABASE_URI = 'postgresql://airflow:airflow@localhost:5432/airflow'\n-    TOKEN = 'BQCYf-Lq5XRLPnl9uVkOp59ocP-6gVpmeaz3ypLnqkxPy4uxcCiGt8Kw4S4xTR3_0gU8s8SeZ1-BEwwXdkxZ6llG5R52_d2fjhI3bVcihRuAv2c5nO3QerU2nj8N0yQNgfxr8f0gx0D-9SUE'\n+    TOKEN = 'BQCp5v5a1ZPUbtxGaR0wQ9HgkXu2odr-2pLnJt9bz99CEQzRBFWvL7wLxjkJUjvGxoRRg7Au7sruRyPohQoI6QR3XN58BoJbdqG_xrB7-kjeToF5ofotFz0DpHOAL4iURGYZx-dCFSq1Cncd'\n     engine = create_engine(DATABASE_URI)\n     headers = {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n"
                }
            ],
            "date": 1646528402477,
            "name": "Commit-0",
            "content": "import pandas as pd\nimport psycopg2\nimport requests\nfrom datetime import datetime\nfrom datetime import timedelta\nimport json\nfrom sqlalchemy import create_engine\n\ndef check_if_valid_data(df: pd.DataFrame) -> bool:\n    \"\"\"\n    This function checks if DataFrame have valid data in it. 1) Check if DataFrame is empty,\n    2) Check if any primary key is repeated or not. 3) Check if the data have any null value.\n    4) Verify if the data extracted comes from the last 24 hours.\n    :param df: This is the dataframe to be checked\n    \"\"\"\n    # Check if dataframe is empty\n    if df.empty:\n        print('No songs were downloaded, Finishing execution')\n        return False\n\n    # Primary Keys\n    if pd.Series(df['played_at']).is_unique:\n        pass\n    else:\n        raise Exception('Primary key check was violated')\n\n    # Check for nulls\n    if df.isnull().values.any():\n        raise Exception('Null value found')\n\n    # Check that all data are of yesterday's date\n#    yesterday = datetime.now() - timedelta(days=1)\n#    yesterday = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)\n\n#    timestamps = df['timestamp'].tolist()\n\n#    for timestamp in timestamps:\n#        if datetime.now() - datetime.strptime(timestamp, '%Y-%m-%d') > timedelta(days=1):\n#            raise Exception('At least one of the returned songs does not come from within the last 24 hours')\n\n#    return True\n\ndef run_spotify_etl():\n    # Scheme: postgresql://user:password@localhost:5432/database_name\n    DATABASE_URI = open('postgres_conection.txt').readline().strip()\n    TOKEN = open('token.txt').readline().strip()\n    engine = create_engine(DATABASE_URI)\n    headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer {token}'.format(token=TOKEN)\n    }\n    today = datetime.now()\n    before = today - timedelta(days=1)\n    before_unix_timestamp = int(before.timestamp()) * 1000\n\n    while True:\n        r = requests.get('https://api.spotify.com/v1/me/player/recently-played?limit=50&after={time}'.format(\n            time=before_unix_timestamp), headers=headers)\n        data = r.json()\n        if 'error' not in data:\n            break\n\n        with open('./misc/token.txt', 'w') as file:\n            # TODO: Obtain a new token automatically from Spotify API webpage\n            TOKEN = input('Please write a new token')\n            file.write(TOKEN)\n            headers = {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer {token}'.format(token=TOKEN)\n            }\n            today = datetime.now()\n            before = today - timedelta(days=1)\n            before_unix_timestamp = int(before.timestamp()) * 1000\n\n    song_names = []\n    artist_names = []\n    played_at_list = []\n    timestamps = []\n\n    for song in data['items']:\n        song_names.append(song['track']['name'])\n        artist_names.append(song['track']['album']['artists'][0]['name'])\n        played_at_list.append(song['played_at'])\n        timestamps.append(song['played_at'][0:10])\n\n    song_dict = {\n        'song_name': song_names,\n        'artist_name': artist_names,\n        'played_at': played_at_list,\n        'timestamp': timestamps\n    }\n\n    song_df = pd.DataFrame(song_dict, columns=['song_name', 'artist_name', 'played_at', 'timestamp'])\n    print(song_df)\n    if check_if_valid_data(song_df):\n        print('Data valid, proceed to load stage')\n\n    song_df.to_sql('spotify_data', con=engine, if_exists='replace')\n    # song_df.to_sql('spotify_data', con=engine, if_exists='append')\n    engine.execute('SELECT * FROM public.spotify_data').fetchall()\n    print('Uploading to database completed')"
        }
    ]
}